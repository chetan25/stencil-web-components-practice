/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Slide } from "./components/cd-side-drawer/cd-side-drawer";
export namespace Components {
    interface CdSideDrawer {
        /**
          * Method to close Drawer
         */
        "onClose": () => Promise<void>;
        /**
          * Method to open Drawer
         */
        "onOpen": () => Promise<void>;
        /**
          * Only used in css to change styling by default props are immutable inside component, to make them mutable use mutable
         */
        "opened": boolean;
        /**
          * Prop use that governs the direction of the Drawer slide
         */
        "slide": Slide;
    }
    interface CdSpinner {
    }
    interface CdStockFinder {
    }
    interface CdStockPrice {
        "symbol": string;
    }
    interface CdTextInput {
        "id": string;
        /**
          * Indicate if the input is Valid or not
         */
        "isValid": string;
        "onChangeCb": (value: string) => void;
        "onFocusOut": (value: string) => void;
        /**
          * Value passed to the input element
         */
        "value": string;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
}
declare global {
    interface HTMLCdSideDrawerElement extends Components.CdSideDrawer, HTMLStencilElement {
    }
    var HTMLCdSideDrawerElement: {
        prototype: HTMLCdSideDrawerElement;
        new (): HTMLCdSideDrawerElement;
    };
    interface HTMLCdSpinnerElement extends Components.CdSpinner, HTMLStencilElement {
    }
    var HTMLCdSpinnerElement: {
        prototype: HTMLCdSpinnerElement;
        new (): HTMLCdSpinnerElement;
    };
    interface HTMLCdStockFinderElement extends Components.CdStockFinder, HTMLStencilElement {
    }
    var HTMLCdStockFinderElement: {
        prototype: HTMLCdStockFinderElement;
        new (): HTMLCdStockFinderElement;
    };
    interface HTMLCdStockPriceElement extends Components.CdStockPrice, HTMLStencilElement {
    }
    var HTMLCdStockPriceElement: {
        prototype: HTMLCdStockPriceElement;
        new (): HTMLCdStockPriceElement;
    };
    interface HTMLCdTextInputElement extends Components.CdTextInput, HTMLStencilElement {
    }
    var HTMLCdTextInputElement: {
        prototype: HTMLCdTextInputElement;
        new (): HTMLCdTextInputElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLElementTagNameMap {
        "cd-side-drawer": HTMLCdSideDrawerElement;
        "cd-spinner": HTMLCdSpinnerElement;
        "cd-stock-finder": HTMLCdStockFinderElement;
        "cd-stock-price": HTMLCdStockPriceElement;
        "cd-text-input": HTMLCdTextInputElement;
        "my-component": HTMLMyComponentElement;
    }
}
declare namespace LocalJSX {
    interface CdSideDrawer {
        /**
          * Only used in css to change styling by default props are immutable inside component, to make them mutable use mutable
         */
        "opened"?: boolean;
        /**
          * Prop use that governs the direction of the Drawer slide
         */
        "slide"?: Slide;
    }
    interface CdSpinner {
    }
    interface CdStockFinder {
        "onCdSymbolSelected"?: (event: CustomEvent<string>) => void;
    }
    interface CdStockPrice {
        "symbol"?: string;
    }
    interface CdTextInput {
        "id"?: string;
        /**
          * Indicate if the input is Valid or not
         */
        "isValid"?: string;
        "onChangeCb"?: (value: string) => void;
        "onFocusOut"?: (value: string) => void;
        /**
          * Value passed to the input element
         */
        "value"?: string;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface IntrinsicElements {
        "cd-side-drawer": CdSideDrawer;
        "cd-spinner": CdSpinner;
        "cd-stock-finder": CdStockFinder;
        "cd-stock-price": CdStockPrice;
        "cd-text-input": CdTextInput;
        "my-component": MyComponent;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "cd-side-drawer": LocalJSX.CdSideDrawer & JSXBase.HTMLAttributes<HTMLCdSideDrawerElement>;
            "cd-spinner": LocalJSX.CdSpinner & JSXBase.HTMLAttributes<HTMLCdSpinnerElement>;
            "cd-stock-finder": LocalJSX.CdStockFinder & JSXBase.HTMLAttributes<HTMLCdStockFinderElement>;
            "cd-stock-price": LocalJSX.CdStockPrice & JSXBase.HTMLAttributes<HTMLCdStockPriceElement>;
            "cd-text-input": LocalJSX.CdTextInput & JSXBase.HTMLAttributes<HTMLCdTextInputElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
        }
    }
}
